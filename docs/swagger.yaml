definitions:
  main.Login:
    properties:
      password:
        type: string
      username:
        description: login using username or email
        type: string
    required:
    - password
    - username
    type: object
  main.PasswordConfirmReset:
    properties:
      confirm_password:
        type: string
      new_password:
        type: string
    required:
    - confirm_password
    - new_password
    type: object
  main.ResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  main.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        description: password harus ada angka, huruf besar, huruf kecil, dan simbol
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  main.updateUser:
    properties:
      email:
        type: string
      imageURL:
        type: string
      language:
        enum:
        - en
        - id
        type: string
      name:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for E-Meeting.
  termsOfService: http://swagger.io/terms/
  title: E-Meeting API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/main.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - User
  /password/reset:
    post:
      consumes:
      - application/json
      description: Request a password reset token to be sent to the user's email
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/main.ResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - User
  /password/reset/{id}:
    put:
      consumes:
      - application/json
      description: Reset user password using a valid reset token
      parameters:
      - description: Reset Token
        in: path
        name: id
        required: true
        type: string
      - description: New Password and Confirm Password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/main.PasswordConfirmReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset user password
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User object to be registered
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - User
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user details by user ID require authentication from header
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.updateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
